<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SukiUI</name>
    </assembly>
    <members>
        <member name="T:SukiUI.Content.Icons">
            <summary>
            AppIcons provided by:
            :: Material Icons under Apache V2 - https://github.com/google/material-design-icons/blob/master/LICENSE
            </summary>
        </member>
        <member name="M:SukiUI.Controls.BusyArea.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="F:SukiUI.Controls.CircleProgressBar.ValueProperty">
            <summary>
            Defines the <see cref="P:SukiUI.Controls.CircleProgressBar.Value"/> property.
            </summary>
        </member>
        <member name="M:SukiUI.Controls.CircleProgressBar.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="M:SukiUI.Controls.CodeView.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="M:SukiUI.Controls.Experimental.ChatUI.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="M:SukiUI.Controls.Experimental.DesktopEnvironment.InternalWindow.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="M:SukiUI.Controls.Experimental.DesktopEnvironment.SukiDesktopEnvironment.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="M:SukiUI.Controls.Experimental.DesktopEnvironment.WindowManager.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="M:SukiUI.Controls.GroupBox.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="F:SukiUI.Controls.SukiMessageBoxHost.UseAlternativeHeaderStyleProperty">
            <summary>
            Defines the <see cref="P:SukiUI.Controls.SukiMessageBoxHost.UseAlternativeHeaderStyle"/> property.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiMessageBoxHost.UseAlternativeHeaderStyle">
            <summary>
            Gets or sets a value indicating whether to use the alternative header style.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiMessageBoxHost.Icon">
            <summary>
            Gets or sets the icon content to display on the header.
            </summary>
        </member>
        <member name="F:SukiUI.Controls.SukiMessageBoxHost.IconPresetProperty">
            <summary>
            Defines the <see cref="P:SukiUI.Controls.SukiMessageBoxHost.IconPreset"/> property.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiMessageBoxHost.IconPreset">
            <summary>
            Gets or sets the preset icon to display on the header.
            </summary>
        </member>
        <member name="F:SukiUI.Controls.SukiMessageBoxHost.IconPresetSizeProperty">
            <summary>
            Defines the <see cref="P:SukiUI.Controls.SukiMessageBoxHost.IconPresetSize"/> property.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiMessageBoxHost.IconPresetSize">
            <summary>
            Gets or sets the size of the preset icon.
            </summary>
        </member>
        <member name="F:SukiUI.Controls.SukiMessageBoxHost.ShowHeaderContentSeparatorProperty">
            <summary>
            Defines the <see cref="P:SukiUI.Controls.SukiMessageBoxHost.ShowHeaderContentSeparator"/> property.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiMessageBoxHost.ShowHeaderContentSeparator">
            <summary>
            Gets or sets a value indicating whether to show the header/content separator.
            </summary>
            <remarks>Only visible if <see cref="P:SukiUI.Controls.SukiMessageBoxHost.UseAlternativeHeaderStyle"/> is <c>false</c>.</remarks>
        </member>
        <member name="F:SukiUI.Controls.SukiMessageBoxHost.FooterLeftItemsSourceProperty">
            <summary>
            Defines the <see cref="P:SukiUI.Controls.SukiMessageBoxHost.FooterLeftItemsSource"/> property.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiMessageBoxHost.FooterLeftItemsSource">
            <summary>
            Gets or sets the items source to display in the footer left of the message box
            </summary>
        </member>
        <member name="F:SukiUI.Controls.SukiMessageBoxHost.ActionButtonsSourceProperty">
            <summary>
            Defines the <see cref="P:SukiUI.Controls.SukiMessageBoxHost.ActionButtonsSource"/> property.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiMessageBoxHost.ActionButtonsSource">
            <summary>
            Gets or sets the action buttons to display in bottom right of the message box.
            </summary>
        </member>
        <member name="F:SukiUI.Controls.SukiMessageBoxHost.ActionButtonsPresetProperty">
            <summary>
            Defines the <see cref="P:SukiUI.Controls.SukiMessageBoxHost.ActionButtonsPreset"/> property.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiMessageBoxHost.ActionButtonsPreset">
            <summary>
            Gets or sets the action buttons to display in bottom right of the message box.
            </summary>
        </member>
        <member name="F:SukiUI.Controls.SukiMessageBoxHost.ItemsSpacingProperty">
            <summary>
            Defines the <see cref="P:SukiUI.Controls.SukiMessageBoxHost.ItemsSpacing"/> property.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiMessageBoxHost.ItemsSpacing">
            <summary>
            Gets or sets the spacing between the items (<see cref="P:SukiUI.Controls.SukiMessageBoxHost.FooterLeftItemsSource"/> and <see cref="P:SukiUI.Controls.SukiMessageBoxHost.ActionButtonsSource"/>) in the message box.
            </summary>
        </member>
        <member name="F:SukiUI.Controls.InfoBar.TitleOrientationProperty">
            <summary>
            Defines the <see cref="P:SukiUI.Controls.InfoBar.TitleOrientation"/> property
            </summary>
        </member>
        <member name="F:SukiUI.Controls.InfoBar.MessageTextAlignmentProperty">
            <summary>
            Defines the <see cref="P:SukiUI.Controls.InfoBar.MessageTextAlignment"/> property
            </summary>
        </member>
        <member name="M:SukiUI.Controls.PasswordBox.PasswordChangedEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.TextChangedEventArgs" /> class.
            </summary>
            <param name="routedEvent">The routed event associated with these event args.</param>
        </member>
        <member name="M:SukiUI.Controls.PasswordBox.PasswordChangedEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent,Avalonia.Interactivity.Interactive)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.TextChangedEventArgs" /> class.
            </summary>
            <param name="routedEvent">The routed event associated with these event args.</param>
            <param name="source">The source object that raised the routed event.</param>
        </member>
        <member name="M:SukiUI.Controls.InstanceViewModel.GenerateCategories(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Factory creating all the categories for a given instance of a ViewModel implementing <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
            <param name="viewModel">the ViewModel instance, to generate/show controls/categories for</param>
            <returns>CategoryViewModels holding representations for each public non static property</returns>
        </member>
        <member name="M:SukiUI.Controls.PropertyGrid.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="M:SukiUI.Controls.PropertyGridDialog.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="M:SukiUI.Controls.PropertyGridWindow.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="P:SukiUI.Controls.SettingsLayout.MinWidthWhetherStackSummaryShow">
            <summary>
            Get or set a value that represents the minimum width for displaying the StackSummary in the SettingsLayout.
            If the width of the SettingsLayout is less than this value, the StackSummary will not be displayed.
            The default value is 1100, and the minimum configurable value is 1.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SettingsLayout.StackSummaryWidth">
            <summary>
            Get or set the width of the StackSummary. The default value is 400, and the minimum configurable value is 0.
            </summary>
        </member>
        <member name="M:SukiUI.Controls.SettingsLayout.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="P:SukiUI.Controls.SukiBackground.Style">
            <summary>
            Which of the default background styles to use - DEFAULT: Gradient
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiBackground.ShaderFile">
            <summary>
            Specify a filename of an EMBEDDED RESOURCE file of type `.SkSL` with or without extension and it will be loaded and displayed.
            This takes priority over the <see cref="P:SukiUI.Controls.SukiBackground.ShaderCode"/> property, which in turns takes priority over <see cref="P:SukiUI.Controls.SukiBackground.Style"/>.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiBackground.ShaderCode">
            <summary>
            Specify the shader code to use directly, simpler if you don't want to create an .SkSL file or want to generate the shader effect at runtime in some way.
            This takes priority over the <see cref="P:SukiUI.Controls.SukiBackground.Style"/> property, but is second in priority to <see cref="P:SukiUI.Controls.SukiBackground.ShaderFile"/> if it is set.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiBackground.AnimationEnabled">
            <summary>
            [WARNING: This feature is experimental and has relatively high GPU utilisation] Enables/disables animations - DEFAULT: False
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiBackground.TransitionsEnabled">
            <summary>
            Enables/disables transition animations when switching backgrounds, Currently non-functional - DEFAULT: False
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiBackground.TransitionTime">
            <summary>
            The amount of time in seconds the background transition will take - DEFAULT: 1.0
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiMainHost.BackgroundAnimationEnabled">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.AnimationEnabled"/>
        </member>
        <member name="P:SukiUI.Controls.SukiMainHost.BackgroundStyle">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.Style"/>
        </member>
        <member name="P:SukiUI.Controls.SukiMainHost.BackgroundShaderFile">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.ShaderFile"/>
        </member>
        <member name="P:SukiUI.Controls.SukiMainHost.BackgroundShaderCode">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.ShaderCode"/>
        </member>
        <member name="P:SukiUI.Controls.SukiMainHost.BackgroundTransitionsEnabled">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.TransitionsEnabled"/>
        </member>
        <member name="P:SukiUI.Controls.SukiMainHost.BackgroundTransitionTime">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.TransitionTime"/>
        </member>
        <member name="P:SukiUI.Controls.SukiMainHost.BackgroundForceSoftwareRendering">
            <summary>
            Forces the background of the window to utilise software rendering.
            This prevents use of any advanced effects or animations and provides only a flat background colour that changes with the theme.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiMainHost.Hosts">
            <summary>
            These controls are displayed above all others and fill the entire window.
            You can include <see cref="T:SukiUI.Controls.SukiDialogHost"/> and <see cref="T:SukiUI.Controls.SukiToastHost"/> or create your own custom implementations.
            </summary>
        </member>
        <member name="F:SukiUI.Controls.SukiSideMenu.FooterMenuItemsSourceProperty">
            <summary>Identifies the <see cref="P:SukiUI.Controls.SukiSideMenu.FooterMenuItemsSource"/> dependency property.</summary>
        </member>
        <member name="T:SukiUI.Controls.SukiWindow.TitleBarVisibilityMode">
            <summary>
            Specifies the visibility mode of the title bar.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.StyleKeyOverride">
            <inheritdoc />
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.MaxWidthScreenRatio">
            <summary>
            Gets or sets the maximum width of the window as a ratio of the host screen width.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.MaxHeightScreenRatio">
            <summary>
            Gets or sets the maximum height of the window as a ratio of the host screen height.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.IsTitleBarVisible">
            <summary>
            Gets or sets a value indicating whether the title bar is visible.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.TitleBarVisibilityOnFullScreen">
            <summary>
            Gets or sets the visibility mode of the title bar when the window is in full screen mode.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.TitleBarAutoHideDelay">
            <summary>
            Gets or sets the delay in milliseconds before the title bar is automatically hidden.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.TitleBarAutoShowDelay">
            <summary>
            Gets or sets the delay in milliseconds before the title bar is automatically shown.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.TitleBarAnimationEnabled">
            <summary>
            Gets or sets a value indicating whether the title bar animations are enabled.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.TitleFontSize">
            <summary>
            Gets or sets the font size of the title bar.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.TitleFontWeight">
            <summary>
            Gets or sets the font weight of the title bar.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.TitleBarContextMenu">
            <summary>
            Gets or sets the context menu that appears when the title bar is right-clicked.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.ShowTitle">
            <summary>
            Whether to display the title bar.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.NonClientAreaContent">
            <summary>
            Customize the title bar.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.LogoContent">
            <summary>
            Gets or sets the content of the logo displayed in the title bar.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.LogoDoubleTapClosesWindow">
            <summary>
            Gets or sets a value indicating whether the bottom border of the window is visible.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.ShowBottomBorder">
            <summary>
            Gets or sets a value indicating whether the bottom border of the window is visible.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.IsMenuVisible">
            <summary>
            Gets or sets a value indicating whether the menu is visible.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.MenuItems">
            <summary>
            Gets or sets the menu items that are displayed in the menu.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.RootCornerRadius">
            <summary>
            Gets or sets the corner radius of the window.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.CanMinimize">
            <summary>
            Gets or sets a value indicating whether the window can be minimized.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.ShowTitlebarBackground">
            <summary>
            Gets or sets a value indicating whether the title bar background is visible.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.CanFullScreen">
            <summary>
            Gets or sets a value indicating whether the window can be full-screened.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.CanPin">
            <summary>
            Gets or sets a value indicating whether the window can be pinned.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.CanMaximize">
            <summary>
            Gets or sets a value indicating whether the window can be maximized.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.CanMove">
            <summary>
            Gets or sets a value indicating whether the window can be moved.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.BackgroundAnimationEnabled">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.AnimationEnabled"/>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.BackgroundStyle">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.Style"/>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.BackgroundShaderFile">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.ShaderFile"/>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.BackgroundShaderCode">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.ShaderCode"/>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.BackgroundTransitionsEnabled">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.TransitionsEnabled"/>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.BackgroundTransitionTime">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.TransitionTime"/>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.BackgroundForceSoftwareRendering">
            <summary>
            Forces the background of the window to utilise software rendering.
            This prevents use of any advanced effects or animations and provides only a flat background colour that changes with the theme.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.RightWindowTitleBarControls">
            <summary>
            Controls that are displayed on the right side of the title bar,
            to the left of the normal window control buttons. (Displays provided controls right-to-left)
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.Hosts">
            <summary>
            These controls are displayed above all others and fill the entire window.
            You can include <see cref="T:SukiUI.Controls.SukiDialogHost"/> and <see cref="T:SukiUI.Controls.SukiToastHost"/> or create your own custom implementations.
            </summary>
        </member>
        <member name="P:SukiUI.Controls.SukiWindow.PreviousVisibleWindowState">
            <summary>
            Gets the previous visible window state.
            </summary>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.OnLoaded(Avalonia.Interactivity.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.OnClosed(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.OnScalingChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the scaling of the window changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.OnWindowStateChanged(Avalonia.Controls.WindowState,Avalonia.Controls.WindowState)">
            <summary>
            Occurs when the window newState changes.
            </summary>
            <param name="oldState"></param>
            <param name="newState"></param>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.LogoOnDoubleTapped(System.Object,Avalonia.Input.TappedEventArgs)">
            <summary>
            Occurs when the logo is double-tapped.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.OnFullScreenButtonClicked(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Occurs when the full screen button is clicked.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.OnPinButtonClicked(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Occurs when the pin button is clicked.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.OnMinimizeButtonClicked(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Occurs when the minimize button is clicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.OnMaximizeButtonClicked(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Occurs when the maximize button is clicked.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.OnCloseButtonClicked(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Occurs when the close button is clicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.AutoHideTitleBarOnPointerMoved(System.Object,Avalonia.Input.PointerEventArgs)">
            <summary>
            Occurs when the cursor is moved when the application is in fullscreen mode and title bar visibility is set to <see cref="F:SukiUI.Controls.SukiWindow.TitleBarVisibilityMode.AutoHidden"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.OnTitleBarPointerPressed(System.Object,Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Occurs when the title bar is clicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.OnTitleBarPointerReleased(System.Object,Avalonia.Input.PointerReleasedEventArgs)">
            <summary>
            Occurs when the title bar is released
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.RaiseResize(System.Object,Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Occurs when the resize grip is clicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.AddResizeGripForLinux(Avalonia.Controls.Panel)">
            <summary>
            Adds resize grips to the window for Linux system.
            </summary>
            <param name="rootPanel"></param>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.ToggleFullScreen">
            <summary>
            Toggles the full screen mode.
            </summary>
        </member>
        <member name="M:SukiUI.Controls.SukiWindow.Dispose">
            <inheritdoc />
        </member>
        <member name="M:SukiUI.Controls.WaveProgress.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="M:SukiUI.Converters.BoolToPasswordCharConverter.SafeGetValue``1(System.Collections.Generic.IList{System.Object},System.Int32,``0)">
            <summary>
            安全获取绑定值（处理 UnsetValue 和类型转换）
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.FluentSukiDialogBuilder.CreateDialog(SukiUI.Dialogs.ISukiDialogManager)">
            <summary>
            Creates a <see cref="T:SukiUI.Dialogs.SukiDialogBuilder"/> instance that can be used to construct a <see cref="T:SukiUI.Dialogs.ISukiDialog"/>
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.FluentSukiDialogBuilder.OfType(SukiUI.Dialogs.SukiDialogBuilder,Avalonia.Controls.Notifications.NotificationType)">
            <summary>
            Gives the dialog a "type" which will display an icon representing it.
            This can be used for MessageBox style dialogs.
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.FluentSukiDialogBuilder.WithTitle(SukiUI.Dialogs.SukiDialogBuilder,System.String)">
            <summary>
            Gives the dialog a title.
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.FluentSukiDialogBuilder.WithContent(SukiUI.Dialogs.SukiDialogBuilder,System.Object)">
            <summary>
            Gives the dialog content. This content can be a ViewModel if desired.
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.FluentSukiDialogBuilder.ShowCardBackground(SukiUI.Dialogs.SukiDialogBuilder,System.Boolean)">
            <summary>
            Hide Card background.
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.FluentSukiDialogBuilder.WithViewModel(SukiUI.Dialogs.SukiDialogBuilder,System.Func{SukiUI.Dialogs.ISukiDialog,System.Object},System.Boolean)">
            <summary>
            Gives the dialog a ViewModel. If this is used, Title/Content are ignored and only the ViewModel is rendered - the View being located by the usual strategy.
            This is useful for custom dialogs.
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.FluentSukiDialogBuilder.Dismiss(SukiUI.Dialogs.SukiDialogBuilder)">
            <summary>
            Begins a dismiss chain.
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.FluentSukiDialogBuilder.ByClickingBackground(SukiUI.Dialogs.SukiDialogBuilder.DismissDialog)">
            <summary>
            Allows the dialog to be dismissed simply by clicking the background
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.FluentSukiDialogBuilder.WithActionButton(SukiUI.Dialogs.SukiDialogBuilder,System.Object,System.Action{SukiUI.Dialogs.ISukiDialog},System.Boolean,System.String[])">
            <summary>
            Adds a button to the bottom of the dialog which will call the supplied callback when clicked.
            Any number of buttons can be added to the dialog.
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.FluentSukiDialogBuilder.OnDismissed(SukiUI.Dialogs.SukiDialogBuilder,System.Action{SukiUI.Dialogs.ISukiDialog})">
            <summary>
            Provides a callback that will be called when this dialog is dismissed for any reason.
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.FluentSukiDialogBuilder.WithYesNoResult(SukiUI.Dialogs.SukiDialogBuilder,System.Object,System.Object,System.String[])">
            <summary>
            Adds Support for 'await'ing the dialog to being closed via <see cref="M:SukiUI.Dialogs.SukiDialogBuilder.TryShowAsync(System.Threading.CancellationToken)"/>
            <para>
            Adds a 'Yes' and 'No' button that both will close/dismiss the dialog and also allows for waiting of either of the buttons being pressed.
            </para>
            <para>
            Pressing the 'Yes' button will result in a 'true' result, while pressing the 'No' button will result in a 'false' result.
            </para>
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.FluentSukiDialogBuilder.WithOkResult(SukiUI.Dialogs.SukiDialogBuilder,System.Object,System.String[])">
            <summary>
            Adds Support for 'await'ing the dialog to being closed via <see cref="M:SukiUI.Dialogs.SukiDialogBuilder.TryShowAsync(System.Threading.CancellationToken)"/>
            <para>
            Adds a 'Ok' button that will close/dismiss the dialog and also allows for waiting of the button being pressed.
            </para>
            <para>
            Pressing the 'Ok' button will result in a 'true' result.
            </para>
            </summary>
        </member>
        <member name="E:SukiUI.Dialogs.ISukiDialogManager.OnDialogShown">
            <summary>
            Raised whenever a dialog is shown.
            </summary>
        </member>
        <member name="E:SukiUI.Dialogs.ISukiDialogManager.OnDialogDismissed">
            <summary>
            Raised whenever a dialog is dismissed. 
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.ISukiDialogManager.TryShowDialog(SukiUI.Dialogs.ISukiDialog)">
            <summary>
            Attempts to show a dialog - If one is already shown this will simply return false and not show the dialog.
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.ISukiDialogManager.TryDismissDialog(SukiUI.Dialogs.ISukiDialog)">
            <summary>
            Attempts to dismiss a dialog - If the specified dialog has already been dismissed, this will return false.
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.ISukiDialogManager.DismissDialog">
            <summary>
            Dismisses the currently active dialog, if there is one.
            </summary>
        </member>
        <member name="M:SukiUI.Dialogs.SukiDialogBuilder.TryShowAsync(System.Threading.CancellationToken)">
            <summary>
            Tries to open a dialog and 'await's/ blocks until its being closed.
            </summary>
            <returns>'True' or 'False' as DialogResult</returns>
            <exception cref="T:System.InvalidOperationException">Will throw if there was an already open dialog, or if the builder wasnt configured to support waiting for it being closed</exception>
        </member>
        <member name="T:SukiUI.Enums.SukiButtonStyles">
            <summary>
            Represents the styles available on the Suki theme for the buttons.
            </summary>
        </member>
        <member name="M:SukiUI.Extensions.ColorExtensions.ToFloatArray(Avalonia.Media.Color)">
            <summary>
            Used primarily for SukiEffect runtime effect uniforms, converts a standard Color to an RGB float array in the range 0-1
            </summary>
        </member>
        <member name="M:SukiUI.Extensions.ColorExtensions.ToFloatArrayNonAlloc(Avalonia.Media.Color,System.Single[])">
            <summary>
            Used primarily for SukiEffect runtime effect uniforms, converts a standard Color to an RGB float array in the range 0-1.
            Allows recycling of an array for performance.
            </summary>
            <param name="c"></param>
            <param name="array"></param>
        </member>
        <member name="T:SukiUI.Extensions.ControlExtensions">
            <summary>
            Adds common functionality to <see cref="T:Avalonia.Controls.Control"/>.
            </summary>
        </member>
        <member name="M:SukiUI.Extensions.ControlExtensions.FindRequiredControl``1(Avalonia.Controls.Control,System.String)">
            <summary>
            Finds the named control in the scope of the specified control.
            </summary>
            <typeparam name="T">The type of the control to find.</typeparam>
            <param name="control">The control to look in.</param>
            <param name="name">The name of the control to find.</param>
            <returns>The control or throws if not found.</returns>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:SukiUI.Extensions.EnumExtensions.GetValues``1(System.Boolean)">
            <summary>
            Gets all the values of an enum type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="orderByName">True to order by enum name, otherwise it will order was defined on enum.</param>
            <returns></returns>
        </member>
        <member name="M:SukiUI.Extensions.EnumExtensions.GetSetFlags``1(``0)">
            <summary>
            Gets all the set flags of an enum value(s).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="flags"></param>
            <returns></returns>
            <remarks>For enums with <see cref="T:System.FlagsAttribute"/>.<br/>
            If you have an enum value set to 0 it will always return. (Filter it before or after calling this function)<br/>
            If you have negative value it can return all flags as undesired effect.</remarks>
        </member>
        <member name="M:SukiUI.Extensions.EnumExtensions.GetSetFlagsIgnoring``1(``0,``0)">
            <summary>
            Gets all the set flags of an enum value(s).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="flags"></param>
            <param name="ignoreFlag">Set a flag to exclude from returning, eg: If you want to ignore or remove an always return 0 flag.</param>
            <returns></returns>
            <remarks>For enums with <see cref="T:System.FlagsAttribute"/>.<br/>
            If you have an enum value set to 0 it will always return. (Filter it before or after calling this function)<br/>
            If you have negative value it can return all flags as undesired effect.</remarks>
        </member>
        <member name="M:SukiUI.Extensions.EnumExtensions.GetSetFlagsIgnoring``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets all the set flags of an enum value(s).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="flags"></param>
            <param name="ignoreFlags">Set flag(s) to exclude from returning, eg: If you want to ignore or remove an always return 0 flag.</param>
            <returns></returns>
            <remarks>For enums with <see cref="T:System.FlagsAttribute"/>.<br/>
            If you have an enum value set to 0 it will always return. (Filter it before or after calling this function)<br/>
            If you have negative value it can return all flags as undesired effect.</remarks>
        </member>
        <member name="M:SukiUI.Extensions.ResourceNodeExtensions.FindRequiredResource(Avalonia.Controls.IResourceHost,System.Object)">
            <summary>
            Finds the specified resource by searching up the logical tree and then global styles.
            </summary>
            <param name="control">The control.</param>
            <param name="key">The resource key.</param>
            <returns>The resource, or <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/> if not found.</returns>
        </member>
        <member name="M:SukiUI.Extensions.WindowExtensions.GetHostScreen(Avalonia.Controls.Window)">
            <summary>
            Gets the screen that contains the largest area of the window.
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:SukiUI.Extensions.WindowExtensions.CenterOnScreen(Avalonia.Controls.Window)">
            <summary>
            Centers the window on the screen that contains the largest area of the window.
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:SukiUI.Extensions.WindowExtensions.CenterOnScreen(Avalonia.Controls.Window,Avalonia.Platform.Screen)">
            <summary>
            Centers the window on the specified screen.
            </summary>
            <param name="window"></param>
            <param name="screen"></param>
        </member>
        <member name="M:SukiUI.Extensions.WindowExtensions.ConstrainMaxSizeToScreenRatio(Avalonia.Controls.Window,System.Double,System.Double)">
            <summary>
            Constrain the maximum size of the window to a ratio of the screen size.
            </summary>
            <param name="window"></param>
            <param name="maxWidthScreenRatio">The max width ratio from [0.0 to 1.0].</param>
            <param name="maxHeightScreenRatio">The max height ratio from [0.0 to 1.0].</param>
            <remarks><p>A ratio &lt;= 0 or a window state of [<see cref="F:Avalonia.Controls.WindowState.FullScreen"/> / <see cref="F:Avalonia.Controls.WindowState.Maximized"/>] will remove the max limit.</p>
            <p>A ratio of <see cref="F:System.Double.NaN"/> will cause that setter size to be ignored.</p>
            <p>The resulting size can never be smaller than the MinWidth/MinHeight properties.</p></remarks>
        </member>
        <member name="M:SukiUI.Helpers.ViewLocator.TryBuild(System.Object)">
            <summary>
            Tries to build a suitable control using an appropriate DataTemplate provided by the App.
            </summary>
            <param name="data"></param>
            <returns>A valid control provided by a suitable ViewLocator if available, otherwise returns an error TextBlock.</returns>
        </member>
        <member name="T:SukiUI.MessageBox.SukiMessageBox">
            <summary>
            Message box factory.
            </summary>
        </member>
        <member name="M:SukiUI.MessageBox.SukiMessageBox.CreateMessageBoxWindow(SukiUI.MessageBox.SukiMessageBoxOptions)">
            <summary>
            Creates a base message box window.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SukiUI.MessageBox.SukiMessageBox.ShowDialog(Avalonia.Controls.Window,SukiUI.Controls.SukiMessageBoxHost,SukiUI.MessageBox.SukiMessageBoxOptions)">
            <summary>
            Shows a message box dialog.
            </summary>
            <param name="owner">Parent window to own this message box.</param>
            <param name="messageBox">The message box.</param>
            <param name="windowOptions">The window options.</param>
            <returns>
            <see cref="T:SukiUI.MessageBox.SukiMessageBoxResult"/> when a preset button was clicked.<br/>
            <see cref="T:Avalonia.Controls.Button"/> when a custom button was clicked.<br/>
            <c>null</c> when the window was closed without clicking a button.
            </returns>
        </member>
        <member name="M:SukiUI.MessageBox.SukiMessageBox.ShowDialog(SukiUI.Controls.SukiMessageBoxHost,SukiUI.MessageBox.SukiMessageBoxOptions)">
            <summary>
            Shows a message box dialog.
            </summary>
            <param name="messageBox">The message box.</param>
            <param name="windowOptions">The window options.</param>
            <returns>
            <see cref="T:SukiUI.MessageBox.SukiMessageBoxResult"/> when a preset button was clicked.<br/>
            <see cref="T:Avalonia.Controls.Button"/> when a custom button was clicked.<br/>
            <c>null</c> when the window was closed without clicking a button.
            </returns>
            <exception cref="T:System.InvalidOperationException">The application does not contain a main window.</exception>
        </member>
        <member name="M:SukiUI.MessageBox.SukiMessageBox.WindowOnClosed(System.Object,System.EventArgs)">
            <summary>
            Handles the closed event of the window to dispose events.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SukiUI.MessageBox.SukiMessageBox.ActionButtonOnClick(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the click event of the action button to close the window.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SukiUI.MessageBox.SukiMessageBoxButtons">
            <summary>
            Specifies the buttons that are displayed on a message box.
            </summary>
        </member>
        <member name="T:SukiUI.MessageBox.SukiMessageBoxButtonsFactory">
            <summary>
            Factory for creating buttons for the message box.
            </summary>
        </member>
        <member name="M:SukiUI.MessageBox.SukiMessageBoxButtonsFactory.CreateButton(System.Object,System.String)">
            <summary>
            Create a custom button with the specified content and classes.
            </summary>
            <param name="content"></param>
            <param name="classes"></param>
            <returns></returns>
        </member>
        <member name="M:SukiUI.MessageBox.SukiMessageBoxButtonsFactory.CreateButton(System.Object,SukiUI.MessageBox.SukiMessageBoxResult,System.String)">
            <summary>
            Create a custom button with the specified content, result and classes.
            </summary>
            <param name="content"></param>
            <param name="result"></param>
            <param name="classes"></param>
            <returns></returns>
        </member>
        <member name="M:SukiUI.MessageBox.SukiMessageBoxButtonsFactory.CreateButton(SukiUI.MessageBox.SukiMessageBoxResult)">
            <summary>
            Create and builds a button for the specified result.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:SukiUI.MessageBox.SukiMessageBoxIcons">
            <summary>
            Specifies the icon to display in a message box.
            </summary>
        </member>
        <member name="T:SukiUI.MessageBox.SukiMessageBoxIconsFactory">
            <summary>
            Factory for creating icons for the message box.
            </summary>
        </member>
        <member name="T:SukiUI.MessageBox.SukiMessageBoxOptions">
            <summary>
            Represents the options for a message box window.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.UseNativeWindow">
            <summary>
            Gets if the window should use the native <see cref="T:Avalonia.Controls.Window"/>, otherwise it will use the <see cref="T:SukiUI.Controls.SukiWindow"/>.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.CanResize">
            <summary>
            Gets if the window can resize.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.CanMinimize">
            <summary>
            Gets if the window can minimize.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.CanMaximize">
            <summary>
            Gets if the window can maximize.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.SizeToContent">
            <summary>
            Gets the size to content behavior of the window.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.WindowStartupLocation">
            <summary>
            Gets the window startup location.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.ShowInTaskbar">
            <summary>
            Gets if the window can show in the taskbar.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.FlowDirection">
            <summary>
            Gets the flow direction of the window.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.MinWidth">
            <summary>
            Gets the minimum width of the window.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.MinHeight">
            <summary>
            Gets the minimum height of the window.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.Width">
            <summary>
            Gets the width of the window.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.Height">
            <summary>
            Gets the height of the window.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.MaxWidthScreenRatio">
            <summary>
            Gets the maximum width of the window as a ratio of the screen width.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.MaxHeightScreenRatio">
            <summary>
            Gets the maximum height of the window as a ratio of the screen height.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.IsTitleBarVisible">
            <summary>
            Gets if the title bar is visible.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.LogoContent">
            <summary>
            Gets the logo to display in the window title bar.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.Title">
            <summary>
            Gets the window title to display in the title har.
            </summary>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.BackgroundAnimationEnabled">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.AnimationEnabled"/>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.BackgroundStyle">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.Style"/>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.BackgroundShaderFile">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.ShaderFile"/>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.BackgroundShaderCode">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.ShaderCode"/>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.BackgroundTransitionsEnabled">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.TransitionsEnabled"/>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.BackgroundTransitionTime">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.TransitionsEnabled"/>
        </member>
        <member name="P:SukiUI.MessageBox.SukiMessageBoxOptions.BackgroundForceSoftwareRendering">
            <inheritdoc cref="P:SukiUI.Controls.SukiBackground.ForceSoftwareRendering"/>
        </member>
        <member name="T:SukiUI.MessageBox.SukiMessageBoxResult">
            <summary>
            Specifies the result of a message box.
            </summary>
        </member>
        <member name="M:SukiUI.Theme.TextEraserButton.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="P:SukiUI.SukiTheme.ThemeColor">
            <summary>
            Used to assign the ColorTheme at launch,
            </summary>
        </member>
        <member name="P:SukiUI.SukiTheme.OnColorThemeChanged">
            <summary>
            Called whenever the application's <see cref="T:SukiUI.Models.SukiColorTheme"/> is changed.
            Useful where controls cannot use "DynamicResource"
            </summary>
        </member>
        <member name="P:SukiUI.SukiTheme.OnBaseThemeChanged">
            <summary>
            Called whenever the application's <see cref="T:Avalonia.Styling.ThemeVariant"/> is changed.
            Useful where controls need to change based on light/dark.
            </summary>
        </member>
        <member name="P:SukiUI.SukiTheme.ActiveColorTheme">
            <summary>
            Currently active <see cref="T:SukiUI.Models.SukiColorTheme"/>
            If you want to change this please use <see cref="M:SukiUI.SukiTheme.ChangeColorTheme(SukiUI.Models.SukiColorTheme)"/>
            </summary>
        </member>
        <member name="P:SukiUI.SukiTheme.ColorThemes">
            <summary>
            All available Color Themes.
            </summary>
        </member>
        <member name="P:SukiUI.SukiTheme.ActiveBaseTheme">
            <summary>
            Currently active <see cref="T:Avalonia.Styling.ThemeVariant"/>
            If you want to change this please use <see cref="M:SukiUI.SukiTheme.ChangeBaseTheme(Avalonia.Styling.ThemeVariant)"/> or <see cref="M:SukiUI.SukiTheme.SwitchBaseTheme"/>
            </summary>
        </member>
        <member name="M:SukiUI.SukiTheme.ChangeColorTheme(SukiUI.Enums.SukiColor)">
            <summary>
            Change the theme to one of the default themes.
            </summary>
            <param name="sukiColor">The <see cref="T:SukiUI.Enums.SukiColor"/> to change to.</param>
        </member>
        <member name="M:SukiUI.SukiTheme.ChangeColorTheme(SukiUI.Models.SukiColorTheme)">
            <summary>
            Tries to change the theme to a specific theme, this can be either a default or a custom defined one.
            </summary>
            <param name="sukiColorTheme"></param>
        </member>
        <member name="M:SukiUI.SukiTheme.SwitchColorTheme">
            <summary>
            Blindly switches to the "next" theme available in the <see cref="P:SukiUI.SukiTheme.ColorThemes"/> collection.
            </summary>
        </member>
        <member name="M:SukiUI.SukiTheme.AddColorTheme(SukiUI.Models.SukiColorTheme)">
            <summary>
            Add a new <see cref="T:SukiUI.Models.SukiColorTheme"/> to the ones available, without making it active.
            </summary>
            <param name="sukiColorTheme">New <see cref="T:SukiUI.Models.SukiColorTheme"/> to add.</param>
        </member>
        <member name="M:SukiUI.SukiTheme.AddColorThemes(System.Collections.Generic.IEnumerable{SukiUI.Models.SukiColorTheme})">
            <summary>
            Adds multiple new <see cref="T:SukiUI.Models.SukiColorTheme"/> to the ones available, without making any active.
            </summary>
            <param name="sukiColorThemes">A collection of new <see cref="T:SukiUI.Models.SukiColorTheme"/> to add.</param>
        </member>
        <member name="M:SukiUI.SukiTheme.ChangeBaseTheme(Avalonia.Styling.ThemeVariant)">
            <summary>
            Tries to change the base theme to the one provided, if it is different.
            </summary>
            <param name="baseTheme"><see cref="T:Avalonia.Styling.ThemeVariant"/> to change to.</param>
        </member>
        <member name="M:SukiUI.SukiTheme.SwitchBaseTheme">
            <summary>
            Simply switches from Light -> Dark and visa versa.
            </summary>
        </member>
        <member name="M:SukiUI.SukiTheme.SetColorThemeResourcesOnColorThemeChanged">
            <summary>
            Initializes the color theme resources whenever the property is changed.
            In an ideal world people wouldn't use the property
            </summary>
        </member>
        <member name="F:SukiUI.SukiTheme.DefaultColorThemes">
            <summary>
            The default Color Themes included with SukiUI.
            </summary>
        </member>
        <member name="M:SukiUI.SukiTheme.GetInstance(Avalonia.Application)">
            <summary>
            Retrieves an instance tied to a specific instance of an application.
            </summary>
            <returns>A <see cref="T:SukiUI.SukiTheme"/> instance that can be used to change themes.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if no SukiTheme has been defined in App.axaml.</exception>
        </member>
        <member name="M:SukiUI.SukiTheme.GetInstance">
            <summary>
            Retrieves an instance tied to the currently active application.
            </summary>
            <returns>A <see cref="T:SukiUI.SukiTheme"/> instance that can be used to change themes.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if no SukiTheme has been defined in App.axaml.</exception>
        </member>
        <member name="M:SukiUI.Toasts.FluentSukiToastBuilder.CreateToast(SukiUI.Toasts.ISukiToastManager)">
            <summary>
            Creates a <see cref="T:SukiUI.Toasts.SukiToastBuilder"/> instance that can be used to construct a <see cref="T:SukiUI.Toasts.ISukiToast"/>
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.FluentSukiToastBuilder.CreateSimpleInfoToast(SukiUI.Toasts.ISukiToastManager)">
            <summary>
            Creates a simple informational toast that can be dismissed by clicking and is otherwise dismissed after 3 seconds.
            This doesn't set the title/content and you should use <see cref="M:SukiUI.Toasts.FluentSukiToastBuilder.WithTitle(SukiUI.Toasts.SukiToastBuilder,System.String)"/> and <see cref="M:SukiUI.Toasts.FluentSukiToastBuilder.WithContent(SukiUI.Toasts.SukiToastBuilder,System.Object)"/>
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.FluentSukiToastBuilder.WithTitle(SukiUI.Toasts.SukiToastBuilder,System.String)">
            <summary>
            Gives the toast a title.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.FluentSukiToastBuilder.WithLoadingState(SukiUI.Toasts.SukiToastBuilder,System.Boolean)">
            <summary>
            Show a loading Toast.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.FluentSukiToastBuilder.WithContent(SukiUI.Toasts.SukiToastBuilder,System.Object)">
            <summary>
            Gives the toast some content. This can be a ViewModel if desired - View will be located via the default location strategy.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.FluentSukiToastBuilder.OfType(SukiUI.Toasts.SukiToastBuilder,Avalonia.Controls.Notifications.NotificationType)">
            <summary>
            Sets the notification type - By default it is <see cref="F:Avalonia.Controls.Notifications.NotificationType.Information"/>
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.FluentSukiToastBuilder.Dismiss(SukiUI.Toasts.SukiToastBuilder)">
            <summary>
            Begins a dismiss statement for the toast - Follow this with something like <see cref="M:SukiUI.Toasts.FluentSukiToastBuilder.After(SukiUI.Toasts.SukiToastBuilder.DismissToast,System.TimeSpan,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.FluentSukiToastBuilder.After(SukiUI.Toasts.SukiToastBuilder.DismissToast,System.TimeSpan,System.Boolean)">
            <summary>
            Automatically dismisses the toast after the given amount of time.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.FluentSukiToastBuilder.ByClicking(SukiUI.Toasts.SukiToastBuilder.DismissToast)">
            <summary>
            Allows the toast to be dismissed by clicking anywhere on the toast.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.FluentSukiToastBuilder.OnClicked(SukiUI.Toasts.SukiToastBuilder,System.Action{SukiUI.Toasts.ISukiToast})">
            <summary>
            The action provided will be called if the body of the toast is clicked.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.FluentSukiToastBuilder.OnDismissed(SukiUI.Toasts.SukiToastBuilder,System.Action{SukiUI.Toasts.ISukiToast,SukiUI.Toasts.SukiToastDismissSource})">
            <summary>
            The action provided will be called when the toast is dismissed for any reason, including clicking.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.FluentSukiToastBuilder.WithActionButton(SukiUI.Toasts.SukiToastBuilder,System.Object,System.Action{SukiUI.Toasts.ISukiToast},System.Boolean,SukiUI.Enums.SukiButtonStyles)">
            <summary>
            Adds an action button to the toast which will call the provided callback on click. Any number of buttons can be added to a toast.
            </summary>
        </member>
        <member name="E:SukiUI.Toasts.ISukiToastManager.OnToastQueued">
            <summary>
            Raised whenever a toast is queued.
            </summary>
        </member>
        <member name="E:SukiUI.Toasts.ISukiToastManager.OnToastDismissed">
            <summary>
            Raised whenever a toast is dismissed.
            </summary>
        </member>
        <member name="E:SukiUI.Toasts.ISukiToastManager.OnAllToastsDismissed">
            <summary>
            Raised whenever all toasts are dismissed at once.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.ISukiToastManager.Queue(SukiUI.Toasts.ISukiToast)">
            <summary>
            Queues a given toast for display.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.ISukiToastManager.Dismiss(SukiUI.Toasts.ISukiToast,SukiUI.Toasts.SukiToastDismissSource)">
            <summary>
            Dismisses a given toast from the stack, if it is still present.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.ISukiToastManager.Dismiss(System.Int32,SukiUI.Toasts.SukiToastDismissSource)">
            <summary>
            Dismisses a given toast from the stack, if it is still present.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.ISukiToastManager.DismissRange(System.Int32,System.Int32)">
            <summary>
            Dismisses a specific range of toasts from the stack.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.ISukiToastManager.EnsureMaximum(System.Int32)">
            <summary>
            Ensures that the toast stack doesn't exceed the specified maximum.
            If it does, it will dismiss the oldest toasts down to the maximum.
            </summary>
            <param name="maxAllowed"></param>
        </member>
        <member name="M:SukiUI.Toasts.ISukiToastManager.DismissAll">
            <summary>
            Dismisses all toasts from the stack immediately.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.ISukiToastManager.IsDismissed(SukiUI.Toasts.ISukiToast)">
            <summary>
            Checks to see if a <see cref="T:SukiUI.Toasts.ISukiToast"/> has already been dismissed from the stack.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.ISukiToastManager.SetDismissTimerPollingInterval(System.Int32)">
            <summary>
            Sets the polling interval for the dismiss timer.
            </summary>
            <param name="milliseconds"></param>
        </member>
        <member name="M:SukiUI.Toasts.ISukiToastManager.SetDismissTimerPollingInterval(System.TimeSpan)">
            <summary>
            Sets the polling interval for the dismiss timer.
            </summary>
            <param name="timeSpan"></param>
        </member>
        <member name="F:SukiUI.Toasts.SukiToastDismissSource.Code">
            <summary>
            The toast was dismissed by code and not interacting with the UI.
            </summary>
        </member>
        <member name="F:SukiUI.Toasts.SukiToastDismissSource.Click">
            <summary>
            The toast was dismissed by the user clicking on it.
            </summary>
        </member>
        <member name="F:SukiUI.Toasts.SukiToastDismissSource.ActionButton">
            <summary>
            The toast was dismissed by the user clicking on an action button.
            </summary>
        </member>
        <member name="F:SukiUI.Toasts.SukiToastDismissSource.Timeout">
            <summary>
            The toast was dismissed by a timeout.
            </summary>
        </member>
        <member name="M:SukiUI.Toasts.SukiToastManager.Dispose">
            <inheritdoc />
        </member>
        <member name="M:SukiUI.Utilities.Effects.EffectDrawBase.Render(SkiaSharp.SKCanvas,SkiaSharp.SKRect)">
            <summary>
            Called every frame to render content.
            </summary>
        </member>
        <member name="M:SukiUI.Utilities.Effects.EffectDrawBase.RenderSoftware(SkiaSharp.SKCanvas,SkiaSharp.SKRect)">
            <summary>
            Called every frame whenever the app falls back to software rendering (or <see cref="P:SukiUI.Utilities.Effects.EffectDrawBase.ForceSoftwareRendering"/> is enabled)
            </summary>
        </member>
        <member name="T:SukiUI.Utilities.Effects.SukiEffect">
            <summary>
            Represents an SKSL shader that SukiUI can handle and pass relevant uniforms into.
            Use the static methods <see cref="M:SukiUI.Utilities.Effects.SukiEffect.FromEmbeddedResource(System.String)"/> and <see cref="M:SukiUI.Utilities.Effects.SukiEffect.FromString(System.String)"/> for creation.
            </summary>
        </member>
        <member name="P:SukiUI.Utilities.Effects.SukiEffect.Effect">
            <summary>
            The compiled <see cref="T:SkiaSharp.SKRuntimeEffect"/> that will actually be used in draw calls. 
            </summary>
        </member>
        <member name="M:SukiUI.Utilities.Effects.SukiEffect.FromEmbeddedResource(System.String)">
            <summary>
            Attempts to load and compile a ".sksl" shader file from the assembly.
            You don't need to provide the extension.
            The shader will be pre-compiled
            REMEMBER: For files to be discoverable in the assembly they should be marked as an embedded resource.
            </summary>
            <param name="shaderName">Name of the shader to load, with or without extension. - MUST BE .sksl</param>
            <returns>An instance of a SukiBackgroundShader with the loaded shader.</returns>
        </member>
        <member name="M:SukiUI.Utilities.Effects.SukiEffect.FromString(System.String)">
            <summary>
            Attempts to compile an sksl shader from a string.
            The shader will be pre-compiled and any errors will be thrown as an exception.
            REMEMBER: For files to be discoverable in the assembly they should be marked as an embedded resource.
            </summary>
            <param name="shaderString">The shader code to be compiled.</param>
            <returns>An instance of a SukiBackgroundShader with the loaded shader</returns>
        </member>
        <member name="M:SukiUI.Utilities.Effects.SukiEffect.EnsureDisposed">
            <summary>
            Necessary to make sure all the unmanaged effects are disposed.
            </summary>
        </member>
        <member name="M:SukiUI.Utilities.Effects.SukiEffect.ToString">
            <summary>
            Returns the pure shader string without uniforms.
            </summary>
        </member>
    </members>
</doc>
